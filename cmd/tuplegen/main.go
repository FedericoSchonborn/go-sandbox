package main

// THIS HURTS TO WATCH, YES, I KNOW.

// TODO:
// - Convert to "text/template"

import (
	"fmt"
	"io"
	"os"
	"os/exec"
	"strconv"
	"strings"
)

func main() {
	if err := run(); err != nil {
		fmt.Fprintf(os.Stderr, "Error: %v\n", err)
		os.Exit(1)
	}
}

func run() error {
	file, err := os.Create("tuple/tuple.go")
	if err != nil {
		return err
	}

	if _, err := io.WriteString(file, "// Package generated by cmd/tuplegen/main.go, DO NOT EDIT!\n\npackage tuple\n"); err != nil {
		return err
	}

	for n := 1; n < 33; n++ {
		typeName := "Tuple" + strconv.Itoa(n)
		newName := "New" + strconv.Itoa(n)

		fields := make([]string, n)
		typeParams := make([]string, n)
		valueParams := make([]string, n)
		args := make([]string, n)
		assigns := make([]string, n)
		accesses := make([]string, n)
		returns := make([]string, n)
		for i := 0; i < n; i++ {
			upperType := "T" + strconv.Itoa(i)
			upperValue := "V" + strconv.Itoa(i)
			lowerValue := "v" + strconv.Itoa(i)
			fields[i] = upperValue + " " + upperType
			typeParams[i] = upperType
			valueParams[i] = upperType
			args[i] = lowerValue + " " + upperType
			assigns[i] = lowerValue
			accesses[i] = "t." + upperValue
			returns[i] = upperType
		}

		if _, err := fmt.Fprintf(file, Template, typeName, strings.Join(typeParams, ","), strings.Join(fields, ";"), strings.Join(valueParams, ","), strings.Join(args, ","), strings.Join(assigns, ","), strings.Join(returns, ","), strings.Join(accesses, ","), newName, n); err != nil {
			return err
		}
	}

	cmd := exec.Command("go", "fmt", "./tuple/tuple.go")
	cmd.Stdout = os.Stdout
	if err := cmd.Run(); err != nil {
		return err
	}

	return nil
}

const Template = `
// %[1]s is a tuple containing %[10]d value(s).
type %[1]s[%[2]s any] struct {
	%[3]s
}

// %[9]s creates a new tuple of %[10]d value(s).
func %[9]s[%[2]s any](%[5]s) %[1]s[%[4]s] {
	return %[1]s[%[4]s]{%[6]s` + ", " + `}
}

// Unwrap unwraps the tuple into the contained %[10]d value(s).
func (t %[1]s[%[2]s]) Unwrap() (%[2]s) {
	return %[8]s
}
`
