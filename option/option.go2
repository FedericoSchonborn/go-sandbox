package option

type Option[T any] struct {
	some  bool
	value T
}

func Some[T any](value T) Option[T] {
	return Option[T]{some: true, value: value}
}

// None and Option{} are equivalent.
func None[T any]() Option[T] {
	return Option[T]{some: false, value: zero[T]()}
}

func (o Option[T]) IsSome() bool {
	return o.some
}

func (o Option[T]) IsNone() bool {
	return !o.some
}

func (o Option[T]) Unwrap() T {
	if !o.some {
		panic("Called Option.Unwrap on None value")
	}

	return o.value
}

func (o Option[T]) UnwrapOr(def T) T {
	if !o.some {
		return def
	}

	return o.value
}

func (o Option[T]) UnwrapOrElse(fn func() T) T {
	if !o.some {
		return fn()
	}

	return o.value
}

func Map[T, U any](o Option[T], fn func(T) U) Option[U] {
	if !o.some {
		return None[U]()
	}

	return Some(fn(o.value))

}

func (o Option[T]) OkOr(err error) (T, error) {
	if !o.some {
		return zero[T](), err
	}

	return o.value, nil
}

func (o Option[T]) OkOrElse(fn func() error) (T, error) {
	if !o.some {
		return zero[T](), fn()
	}

	return o.value, nil
}

func (o Option[T]) Filter(pred func(T) bool) Option[T] {
	if !o.some {
		return None[T]()
	}

	if !pred(o.value) {
		return None[T]()
	}

	return Some(o.value)
}

func (o Option[T]) Or(ob Option[T]) Option[T] {
	if !o.some {
		return ob
	}

	return o
}

func (o Option[T]) OrElse(fn func() Option[T]) Option[T] {
	if !o.some {
		return fn()
	}

	return o
}

func zero[T any]() T {
	var value T
	return value
}
