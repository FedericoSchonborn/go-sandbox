package main

// THIS HURTS TO WATCH, YES, I KNOW.

import (
	"fmt"
	"io"
	"os"
	"os/exec"
	"strconv"
)

var upNames = []byte("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
var downNames = []byte("abcdefghijklmnopqrstuvwxyz")

func main() {
	file, err := os.Create("tuple/tuple_generated.go")
	if err != nil {
		panic(err)
	}

	if _, err := io.WriteString(file, "// Package generated by tuplegen, DO NOT EDIT!\n\npackage tuple\n"); err != nil {
		panic(err)
	}

	for n := 1; n < 27; n++ {
		typeName := "Tuple"
		if n > 0 {
			typeName += strconv.Itoa(n)
		}

		names := upNames[0:n]

		var fields string
		var generics string
		var params string
		var args string
		var assign string
		for index, name := range names {
			if index == len(names)-1 {
				fields += string(name) + " " + string(name) + ""
				generics += string(name) + " any"
				params += string(name) + ""
				args += string(downNames[index]) + " " + string(name)
				assign += string(name) + ": " + string(downNames[index])
				break
			}

			fields += string(name) + " " + string(name) + ";"
			generics += string(name) + ","
			params += string(name) + ","
			args += string(downNames[index]) + " " + string(name) + ", "
			assign += string(name) + ": " + string(downNames[index]) + ", "
		}

		if _, err := fmt.Fprintf(file, `
type %[1]s[%[2]s] struct {
	%[3]s
}

func New%[1]s[%[2]s](%[5]s) %[1]s[%[4]s] {
	return %[1]s[%[4]s]{%[6]s}
}
`, typeName, generics, fields, params, args, assign); err != nil {
			panic(err)
		}
	}

	cmd := exec.Command("gotip", "fmt", "./tuple")
	cmd.Stdout = os.Stdout
	if err := cmd.Run(); err != nil {
		panic(err)
	}
}
