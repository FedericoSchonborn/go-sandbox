package main

// THIS HURTS TO WATCH, YES, I KNOW.

import (
	"fmt"
	"io"
	"os"
	"os/exec"
	"strconv"
)

func main() {
	file, err := os.Create("tuple/tuple_generated.go")
	if err != nil {
		panic(err)
	}

	if _, err := io.WriteString(file, "// Package generated by tuplegen, DO NOT EDIT!\n\npackage tuple\n"); err != nil {
		panic(err)
	}

	for n := 0; n < 32; n++ {
		typeName := "Tuple1"
		if n != 0 {
			typeName = "Tuple" + strconv.Itoa(n+1)
		}

		var fields string
		var generics string
		var params string
		var args string
		var assign string
		for index := 0; index < n+1; index++ {
			upTName := "T" + strconv.Itoa(index)
			upVName := "V" + strconv.Itoa(index)
			downVName := "v" + strconv.Itoa(index)

			if index == n {
				fields += string(upVName) + " " + string(upTName)
				generics += string(upTName) + " any"
				params += string(upTName)
				args += string(downVName) + " " + string(upTName)
				assign += "\n" + string(upVName) + ": " + string(downVName) + ",\n"
				break
			}

			fields += string(upVName) + " " + string(upTName) + ";"
			generics += string(upTName) + ","
			params += string(upTName) + ","
			args += string(downVName) + " " + string(upTName) + ", "
			assign += "\n" + string(upVName) + ": " + string(downVName) + ","
		}

		if _, err := fmt.Fprintf(file, `
type %[1]s[%[2]s] struct {
	%[3]s
}

func New%[1]s[%[2]s](%[5]s) %[1]s[%[4]s] {
	return %[1]s[%[4]s]{%[6]s}
}
`, typeName, generics, fields, params, args, assign); err != nil {
			panic(err)
		}
	}

	cmd := exec.Command("gotip", "fmt", "./tuple")
	cmd.Stdout = os.Stdout
	if err := cmd.Run(); err != nil {
		panic(err)
	}
}
